
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      Consilio
 *  Source:     C:\Users\Frank\Documents\Studium Medieninformatik\FSV\MME2\repro\Consilio\src\Consilio.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2012.04.17 11:09:02 CEST
 */

package 
{

import application.ConsilioApp;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Panel;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;


[SWF( backgroundColor='12170677', heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_Consilio_FlexInit")]

[Frame(factoryClass="_Consilio_mx_managers_SystemManager")]


//  begin class def
public class Consilio
    extends application.ConsilioApp
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var mainPanel : mx.containers.Panel;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: application.ConsilioApp
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: spark.components.Button
        ,
        id: "myButton"
        ,
        propertiesFactory: function():Object { return {
          label: "Click me!"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        id: "mainPanel"
        ,
        propertiesFactory: function():Object { return {
          title: "Consilio",
          percentWidth: 100.0,
          percentHeight: 100.0,
          layout: "absolute",
          verticalCenter: 0,
          horizontalCenter: 0
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function Consilio()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        this.minWidth = 1024;
        this.minHeight = 768;
        this.layout = "vertical";


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.backgroundColor = 12170677;
        };


        // ambient styles
        mx_internal::_Consilio_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  end scripts


    //  supporting function definitions for properties, events, styles, effects


    //  initialize style defs for Consilio

    mx_internal var _Consilio_StylesInit_done:Boolean = false;

    mx_internal function _Consilio_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_Consilio_StylesInit_done)
            return;
        else
            mx_internal::_Consilio_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }


    //  embed carrier vars
    //  end embed carrier vars


//  end class def
}

//  end package def
}
